#summary TorAS Events Reference
#labels TorAS,ActionScript,events

= TorControl Events =

The following events are broadcast by the TorControl instance synchronously (as a result of an action):


*`TorControlEvent.ONCONNECT`* - Dispatched when the TorControl instance successfully connects to what is believed to be a Tor control socket. Until the ONAUTHENTICATE event is dispatched (and verified as a Tor connection), the socket is considered unavailable.

 
*`TorControlEvent.ONCONNECTERROR`* - Dispatched when the TorControl instance experiences an error connecting to the Tor control socket. 

 
*`TorControlEvent.ONAUTHENTICATE`* - Dispatched when the Tor control connection has been authenticated and is ready to receive commands. For most applications, it's more useful to listen to this event rather than the ONCONNECT event.

 
*`TorControlEvent.ONRESPONSE`* - Dispatched when the Tor control connection responds to a synchronous response (for example, a _sendRawControlMessage_ call). The parsed response body will be included in the event's _body_ property, the response status code (similar to HTTP response status codes) will be included as the _status_ property, and the raw (unparsed) response will be included as the _rawMessage_ property.
 
=== Asynchronous Tor Events ===

The following events are dispatched by the Tor process autonomously. Although TorAS dynamically binds to these events whenever listeners are assigned, it is not responsible for the event contents that Tor includes (the event _body_ property, for example).

For detailed information on the contents of each of the following Tor events, please see section 4 of the Tor Control Protocol v1 Specification: https://code.google.com/p/toras/wiki/TorControlProtocol_v1

*`TorControlEvent.ONLOGMSG`* - Dispatched whenever TorControl receives a Tor log message via STDOUT. This type of message will only ever be received if TorControl is used to start the Tor process. The Tor log message will be included in the event's _body_ property.


*`TorControlEvent.TOR_DEBUG`* - Dispatched when the Tor process dispatches an internal "DEBUG" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_INFO`* - Dispatched when the Tor process dispatches an internal "INFO" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_NOTICE`* - Dispatched when the Tor process dispatches an internal "NOTICE" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_WARN`* - Dispatched when the Tor process dispatches an internal "WARN" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_ERR`* - Dispatched when the Tor process dispatches an internal "ERR" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_CIRC`* - Dispatched when the Tor process dispatches an internal "CIRC" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_STREAM`* - Dispatched when the Tor process dispatches an internal "STREAM" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_ORCONN`* - Dispatched when the Tor process dispatches an internal "ORCONN" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_BW`* - Dispatched when the Tor process dispatches an internal "BW" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_NEWDESC`* - Dispatched when the Tor process dispatches an internal "NEWDESC" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_AUTHDIR_NEWDESCS`* - Dispatched when the Tor process dispatches an internal "AUTHDIR_NEWDESCS" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.


*`TorControlEvent.TOR_DESCCHANGED`* - Dispatched when the Tor process dispatches an internal "DESCCHANGED" event. The details of the event are included in the event object's _body_ property, and the raw (un-parsed) data received in the event is in the _rawMessage_ property. The Tor event name that was captured is included in the _torEvent_ property.

,,There are a number of additional asynchronous events that Tor dispatches which are not currently supported by TorAS. Since these include a variety of optional parameters, they have been excluded until a suitable way to include these parameters has been developed (so yes, they will be supported at some point).,,

----

= SOCKS5Tunnel Events =

The following events are broadcast by the SOCKS5Tunnel instance: